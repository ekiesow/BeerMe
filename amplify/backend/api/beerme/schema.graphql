type Drink
  @model
  @auth(
    rules: [
      {allow: public, operations: [read]} # must have API key configured in aws-exports.js
      {allow: groups, groups: ["Admin"]} # Admin users can access any operation
    ]
  )
  @key(name: "byDrink", fields: ["drinkId"]) { # name specifies the name of a secondary index
  drinkId: ID!
  drinkName: String!
  drinkStyle: String
  abv: String
  breweryName: String!
  breweryLocation: String
  description: String
  price: Int!
  image: Image @connection # one-to-one connection: Drink "has one" Image
}

type S3Object {
  bucket: String!
  region: String!
  key: String!
}

type Image
  @model
  @auth(
    rules: [
      {allow: public, operations: [read]} # must have API key configured in aws-exports.js
      {allow: groups, groups: ["Admin"]} # Admin users can access any operation
    ]
  ) {
  id: ID!
  name: String
  # owner: String
  file: S3Object
}

type Customer
  @model
  @auth(rules: [{allow: owner, operations: [create, read, update]}]) {
  id: ID!
  userId: String!
  username: String!
  email: String!
  firstName: String!
  lastName: String!
  phoneNumber: String
  address: Address
  shippingAddress: Address
  ordersByDate: [Order] @connection(keyName: "byUserIdByDate", fields: ["id"]) # one-to-many connection: Customer "has many" orders
  ordersByStatusByDate: [Order]
    @connection(keyName: "byUserIdByStatusByDate", fields: ["id"]) # one-to-many connection: Customer "has many" orders
}

type Address @model @auth(rules: [{allow: owner}]) {
  id: ID!
  userId: String!
  firstName: String!
  lastName: String!
  address1: String!
  address2: String
  city: String!
  state: String!
  postalCode: String!
}

enum OrderStatus {
  DELIVERED
  SHIPPED
  PENDING
  DELAYED
  CANCELLED
  UNKNOWN
  OPEN
}

type Order
  @model
  @auth(rules: [{allow: owner}])
  @key(
    name: "byUserIdByDate"
    fields: ["userId", "createdAt"]
    queryField: "orderByUserIdByDate"
  ) # @key allows Orders to be queried by userId and createdAt
  @key(
    name: "byUserIdByStatusByDate"
    fields: ["userId", "status", "createdAt"]
    queryField: "ordersByUserIdByStatusByDate"
  ) # query orders by userId and status and createdAt
  @key(fields: ["id", "userId"]) {
  id: ID!
  userId: String!
  customerEmail: String!
  createdAt: AWSDateTime!
  drinks: [Drink] @connection(keyName: "byDrink", fields: ["id"])
  amount: Int!
  status: OrderStatus!
  customer: Customer @connection(fields: ["userId"]) # Add many-to-one connection to type that has one-to-many. Each Order "belongs to" a Customer.
  shippingAddress: Address!
  orderItems: [OrderItem] @connection(keyName: "byOrder", fields: ["id"]) # Order has many CartItems
}

type OrderItem
  @model
  @auth(rules: [{allow: owner}])
  @key(
    name: "byOrder"
    fields: ["orderId", "drinkId"]
    queryField: "orderItemByOrderIdByDrinkId"
  )
  @key(name: "byOrderId", fields: ["userId"], queryField: "orderItemByUserId")
  @key(fields: ["id", "userId"]) { # HASH key: id, SORT key: orderId
  id: ID!
  orderId: ID!
  drinkId: ID!
  drink: Drink @connection(fields: ["drinkId"])
  userId: String!
  quantity: Int!
  order: Order @connection(fields: ["orderId"]) # OrderItem belongs to Order
}
