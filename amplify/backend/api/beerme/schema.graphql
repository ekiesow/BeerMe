type Drink
  @model
  @auth(
    rules: [
      {allow: private, operations: [read]} # must have API key configured in aws-exports.js
      {allow: groups, groups: ["Admin"]} # Admin users can access any operation
    ]
  )
 @key(fields: ["id", "createdAt"]) {
  id: ID!
  createdAt: AWSDateTime!
  drinkName: String!
  drinkStyle: String
  abv: String
  breweryName: String!
  breweryLocation: String
  description: String
  price: Int!
  file: S3Object
  fileKey: String
}

type S3Object {
  bucket: String!
  region: String!
  key: String!
}

type Customer
  @model
  @auth(rules: [{allow: owner, operations: [create, read, update]}]) {
  id: ID!
  userId: String!
  username: String!
  email: String!
  firstName: String!
  lastName: String!
  phoneNumber: String
  address: Address
  shippingAddress: Address
  ordersByDate: [Order] @connection(keyName: "byCustomerByDate", fields: ["id"]) # one-to-many connection: Customer "has many" orders
  ordersByStatusByDate: [Order]
    @connection(keyName: "byCustomerByStatusByDate", fields: ["id"]) # one-to-many connection: Customer "has many" orders
}

type Address @model @auth(rules: [{allow: owner}]) {
  id: ID!
  userId: String!
  firstName: String!
  lastName: String!
  address1: String!
  address2: String
  city: String!
  state: String!
  postalCode: String!
}

enum OrderStatus {
  DELIVERED
  SHIPPED
  PENDING
  DELAYED
  CANCELLED
  UNKNOWN
  OPEN
}

type Order
  @model
  @auth(rules: [{allow: owner}])
  @key(name: "byCustomerByDate", fields: ["customerId", "createdAt"]) # @key allows Orders to be queried by userId and createdAt
  @key(
    name: "byCustomerByStatusByDate"
    fields: ["customerId", "status", "createdAt"]
  ) { # query orders by userId and status and createdAt
  id: ID!
  customerId: ID!
  userId: String!
  customerEmail: String!
  createdAt: AWSDateTime!
  amount: Int!
  status: OrderStatus!
  customer: Customer @connection(fields: ["customerId"]) # Add many-to-one connection to type that has one-to-many. Each Order "belongs to" a Customer.
  shippingAddress: Address!
  orderItems: [OrderItem]
    @connection(keyName: "orderItemByOrder", fields: ["id"]) # Order has many CartItems
}

type OrderItem
  @model
  @auth(rules: [{allow: owner}])
  @key(
    name: "orderItemByOrder"
    fields: ["orderId"]
    queryField: "orderItemByOrderId"
  ) {
  id: ID!
  orderId: ID!
  drinkId: ID!
  drink: Drink @connection(fields: ["drinkId"])
  userId: String!
  quantity: Int!
  order: Order! @connection(fields: ["orderId"]) # OrderItem belongs to Order
}
